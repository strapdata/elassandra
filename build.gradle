/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
import org.apache.tools.ant.taskdefs.condition.Os
import org.elasticsearch.gradle.BuildPlugin
import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.VersionCollection
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.plugin.PluginBuildPlugin
import org.gradle.util.GradleVersion
import org.gradle.util.DistributionLocator
import org.gradle.plugins.ide.eclipse.model.SourceFolder
import com.github.jk1.license.render.*;
import com.github.jk1.license.filter.*;

plugins {
    id "org.sonarqube" version "3.0"
    id 'com.gradle.build-scan' version '2.3'
    id 'com.github.jk1.dependency-license-report' version '1.3'
    id 'base'
}

sonarqube {
  properties {
    property "sonar.projectKey", "riptano_elassandra"
    property "sonar.organization", "riptano"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

apply plugin: 'nebula.info-scm'
apply from: 'gradle/build-scan.gradle'
apply plugin: 'com.github.jk1.dependency-license-report'

licenseReport {
  renderers = [new CsvReportRenderer(separator:';'), new TextReportRenderer(), new InventoryHtmlReportRenderer('index.html', 'Elassandra License Report')]
  filters = [new LicenseBundleNormalizer(bundlePath: rootProject.file('buildSrc/src/main/resources/license-normalizer-bundle.json'))]
  projects = [project] + project.subprojects
  excludes = [ 'com.strapdata.elasticsearch:elasticsearch-core' ]
}



// common maven publishing configuration
allprojects {
  group = 'com.strapdata.elasticsearch'
  version = VersionProperties.elasticsearch
  description = "Elasticsearch subproject ${project.path}"
}

ext.repoUsername = { project.hasProperty("repoUsername") ? getProperty("repoUsername") : "" }
ext.repoPassword = { project.hasProperty("repoPassword") ? getProperty("repoPassword") : "" }
// repoUrl can override the publication repo URL.

BuildPlugin.configureRepositories(project)

String licenseCommit
if (VersionProperties.elasticsearch.toString().endsWith('-SNAPSHOT')) {
  licenseCommit = scminfo.change ?: "master" // leniency for non git builds
} else {
  licenseCommit = "v${version}"
}

subprojects {
  // Default to the apache license
  project.ext.licenseName = 'The Apache Software License, Version 2.0'
  project.ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

  // we only use maven publish to add tasks for pom generation
  plugins.withType(MavenPublishPlugin).whenPluginAdded {
    publishing {
      repositories {
        maven {
          name = 'target'
          credentials {
            username = repoUsername
            password = repoPassword
          }
          if (project.hasProperty("repoUrl")) {
            url project.getProperty("repoUrl")
          } else if(project.version.endsWith('-SNAPSHOT')) {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
          } else {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
          }
        }
        maven {
          name = 'test'
          url = "${rootProject.buildDir}/local-test-repo"
        }
      }
      publications {
        // add license information to generated poms
        all {
          pom.withXml { XmlProvider xml ->
            Node node = xml.asNode()
            node.appendNode('inceptionYear', '2015')

            Node license = node.appendNode('licenses').appendNode('license')
            license.appendNode('name', project.licenseName)
            license.appendNode('url', project.licenseUrl)
            license.appendNode('distribution', 'repo')

            Node developer = node.appendNode('developers').appendNode('developer')
            developer.appendNode('name', 'Strapdata')
            developer.appendNode('url', 'https://www.strapdata.com')
          }
        }
        maven(MavenPublication) {
          if (components.hasProperty('java')) {
            from components.java
            artifacts {
              archives sourcesJar
              archives javadocJar
            }
          }
        }
      }
    }
  }

  plugins.withType(BuildPlugin).whenPluginAdded {
      project.licenseFile = project.rootProject.file('licenses/APACHE-LICENSE-2.0.txt')
      project.noticeFile = project.rootProject.file('NOTICE.txt')
  }
}

/* Introspect all versions of ES that may be tested against for backwards
 * compatibility. It is *super* important that this logic is the same as the
 * logic in VersionUtils.java, throwing out alphas because they don't have any
 * backwards compatibility guarantees and only keeping the latest beta or rc
 * in a branch if there are only betas and rcs in the branch so we have
 * *something* to test against. */
VersionCollection versions = new VersionCollection(file('server/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8'))

task updateCIBwcVersions() {
    doLast {
        File yml = file(".ci/bwcVersions")
        yml.text = ""
        yml << "BWC_VERSION:\n"
        versions.indexCompatible.each {
            yml << "  - \"$it\"\n"
        }
    }
}

// build metadata from previous build, contains eg hashes for bwc builds
String buildMetadataValue = System.getenv('BUILD_METADATA')
if (buildMetadataValue == null) {
  buildMetadataValue = ''
}
Map<String, String> buildMetadataMap = buildMetadataValue.tokenize(';').collectEntries {
  def (String key, String value) = it.split('=')
  return [key, value]
}

// injecting groovy property variables into all projects
allprojects {
  project.ext {
    // for ide hacks...
    isEclipse = System.getProperty("eclipse.launcher") != null ||   // Detects gradle launched from Eclipse's IDE
            System.getProperty("eclipse.application") != null ||    // Detects gradle launched from the Eclipse compiler server
            gradle.startParameter.taskNames.contains('eclipse') ||  // Detects gradle launched from the command line to do eclipse stuff
            gradle.startParameter.taskNames.contains('cleanEclipse')
    isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')

    // for BWC testing
    bwcVersions = versions

    buildMetadata = buildMetadataMap
  }
}

task verifyVersions {
  doLast {
    if (gradle.startParameter.isOffline()) {
      throw new GradleException("Must run in online mode to verify versions")
    }
    // Read the list from maven central. 
    // Fetch the metadata an parse the xml into Version instances because it's more straight forward here 
    // rather than bwcVersion ( VersionCollection ).
    new URL('https://oss.sonatype.org/content/repositories/snapshots/com/strapdata/elasticsearch/elasticsearch/maven-metadata.xml').openStream().withStream { s ->
      bwcVersions.compareToAuthoritative(
              new XmlParser().parse(s)
                      .versioning.versions.version
                      .collect { it.text() }.findAll { it ==~ /\d+\.\d+\.\d+/ }
                      .collect { Version.fromString(it) }
      )
    }
    String ciYml = file(".ci/bwcVersions").text
    bwcVersions.indexCompatible.each {
        if (ciYml.contains("\"$it\"\n") == false) {
            throw new Exception(".ci/bwcVersions is outdated, run `./gradlew updateCIBwcVersions` and check in the results");
        }
    }
  }
}

/*
 * When adding backcompat behavior that spans major versions, temporarily
 * disabling the backcompat tests is necessary. This flag controls
 * the enabled state of every bwc task. It should be set back to true
 * after the backport of the backcompat code is complete.
 */
boolean bwc_tests_enabled = true
final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */
if (bwc_tests_enabled == false) {
  if (bwc_tests_disabled_issue.isEmpty()) {
    throw new GradleException("bwc_tests_disabled_issue must be set when bwc_tests_enabled == false")
  }
  println "========================= WARNING ========================="
  println "         Backwards compatibility tests are disabled!"
  println "See ${bwc_tests_disabled_issue}"
  println "==========================================================="
}
if (project.gradle.startParameter.taskNames.find { it.startsWith("checkPart") } != null) {
  // Disable BWC tests for checkPart* tasks as it's expected that this will run un it's own check
  bwc_tests_enabled = false
}

subprojects {
  ext.bwc_tests_enabled = bwc_tests_enabled
  /*
   * Versions of Elasticsearch 5.1.1 through 5.3.0 inclusive did not start on versions of Linux with cgroups v2 enabled (kernel >= 4.5).
   * This property is provided to all projects that need to check conditionally if they should skip a BWC test task.
   */
  ext.cgroupsV2Enabled = Os.isFamily(Os.FAMILY_UNIX) && "mount".execute().text.readLines().any { it =~ /.*type cgroup2.*/ }
}

task verifyBwcTestsEnabled {
  doLast {
    if (bwc_tests_enabled == false) {
      throw new GradleException('Bwc tests are disabled. They must be re-enabled after completing backcompat behavior backporting.')
    }
  }
}

task branchConsistency {
  description 'Ensures this branch is internally consistent. For example, that versions constants match released versions.'
  group 'Verification'
  dependsOn verifyVersions, verifyBwcTestsEnabled
}

allprojects {
  // ignore missing javadocs
  tasks.withType(Javadoc) { Javadoc javadoc ->
    // the -quiet here is because of a bug in gradle, in that adding a string option
    // by itself is not added to the options. By adding quiet, both this option and
    // the "value" -quiet is added, separated by a space. This is ok since the javadoc
    // command already adds -quiet, so we are just duplicating it
    // see https://discuss.gradle.org/t/add-custom-javadoc-option-that-does-not-take-an-argument/5959
    javadoc.options.encoding='UTF8'
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
  }

  /* Sets up the dependencies that we build as part of this project but
    register as though they were external to resolve internally. We register
    them as external dependencies so the build plugin that we use can be used
    to build elasticsearch plugins outside of the elasticsearch source tree. */
  ext.projectSubstitutions = [
    "com.strapdata.elasticsearch.gradle:build-tools:${version}": ':build-tools',
    "org.elasticsearch:rest-api-spec:${version}": ':rest-api-spec',
    "com.strapdata.elasticsearch:elasticsearch:${version}": ':server',
    "com.strapdata.elasticsearch:elasticsearch-cli:${version}": ':libs:cli',
    "com.strapdata.elasticsearch:elasticsearch-core:${version}": ':libs:core',
    "com.strapdata.elasticsearch:elasticsearch-x-content:${version}": ':libs:x-content',
    "com.strapdata.elasticsearch:elasticsearch-secure-sm:${version}": ':libs:secure-sm',
    "com.strapdata.elasticsearch:elasticsearch-ssl-config:${version}": ':libs:elasticsearch-ssl-config',
    "com.strapdata.elasticsearch.client:elasticsearch-rest-client:${version}": ':client:rest',
    "com.strapdata.elasticsearch.client:elasticsearch-rest-client-sniffer:${version}": ':client:sniffer',
    "com.strapdata.elasticsearch.client:elasticsearch-rest-high-level-client:${version}": ':client:rest-high-level',
    "com.strapdata.elasticsearch.client:test:${version}": ':client:test',
    "com.strapdata.elasticsearch.client:transport:${version}": ':client:transport',
    "com.strapdata.elasticsearch.plugin:elasticsearch-scripting-painless-spi:${version}": ':modules:lang-painless:spi',
    "com.strapdata.elasticsearch.test:framework:${version}": ':test:framework',
    "com.strapdata.elasticsearch.distribution.zip:elasticsearch:${version}": ':distribution:archives:zip',
    "com.strapdata.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:archives:tar',
    "com.strapdata.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:packages:rpm',
    "com.strapdata.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:packages:deb',
          /*
    "com.strapdata.elasticsearch.distribution.integ-test-zip:elasticsearch:${version}": ':distribution:archives:integ-test-zip',
    "com.strapdata.elasticsearch.distribution.zip:elasticsearch-oss:${version}": ':distribution:archives:oss-zip',
    "com.strapdata.elasticsearch.distribution.tar:elasticsearch-oss:${version}": ':distribution:archives:oss-tar',
    "com.strapdata.elasticsearch.distribution.rpm:elasticsearch-oss:${version}": ':distribution:packages:oss-rpm',
    "com.strapdata.elasticsearch.distribution.deb:elasticsearch-oss:${version}": ':distribution:packages:oss-deb',
           */
    "com.strapdata.elasticsearch.test:logger-usage:${version}": ':test:logger-usage',
    // for transport client
    "com.strapdata.elasticsearch.plugin:transport-netty4-client:${version}": ':modules:transport-netty4',
    "com.strapdata.elasticsearch.plugin:reindex-client:${version}": ':modules:reindex',
    "com.strapdata.elasticsearch.plugin:lang-mustache-client:${version}": ':modules:lang-mustache',
    "com.strapdata.elasticsearch.plugin:parent-join-client:${version}": ':modules:parent-join',
    "com.strapdata.elasticsearch.plugin:aggs-matrix-stats-client:${version}": ':modules:aggs-matrix-stats',
    "com.strapdata.elasticsearch.plugin:percolator-client:${version}": ':modules:percolator',
    "com.strapdata.elasticsearch.plugin:rank-eval-client:${version}": ':modules:rank-eval',
  ]
  // substitute unreleased versions with projects that check out and build locally
  /*
  bwcVersions.forPreviousUnreleased { VersionCollection.UnreleasedVersionInfo unreleasedVersion ->
    Version unreleased = unreleasedVersion.version
    String snapshotProject = ":distribution:bwc:${unreleasedVersion.gradleProjectName}"
    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${unreleased}"] = snapshotProject
    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${unreleased}"] = snapshotProject
    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${unreleased}"] = snapshotProject
    if (unreleased.onOrAfter('6.3.0')) {
      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch-oss:${unreleased}"] = snapshotProject
      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch-oss:${unreleased}"] = snapshotProject
      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch-oss:${unreleased}"] = snapshotProject
    }
  }
  */

  /*
   * Gradle only resolve project substitutions during dependency resolution but
   * we sometimes want to do the resolution at other times. This creates a
   * convenient method we can call to do it.
   */
  ext.dependencyToProject = { Dependency dep ->
    if (dep instanceof ProjectDependency) {
      return dep.dependencyProject
    } else {
      String substitution = projectSubstitutions.get("${dep.group}:${dep.name}:${dep.version}")
      if (substitution != null) {
        return findProject(substitution)
      }
      return null
    }
  }

  project.afterEvaluate {
    configurations.all {
      resolutionStrategy.dependencySubstitution { DependencySubstitutions subs ->
        projectSubstitutions.each { k,v ->
          subs.substitute(subs.module(k)).with(subs.project(v))
        }
      }
    }

    // Handle javadoc dependencies across projects. Order matters: the linksOffline for
    // org.elasticsearch:elasticsearch must be the last one or all the links for the
    // other packages (e.g org.elasticsearch.client) will point to server rather than
    // their own artifacts.
    if (project.plugins.hasPlugin(BuildPlugin) || project.plugins.hasPlugin(PluginBuildPlugin)) {
      String artifactsHost = VersionProperties.elasticsearch.endsWith("-SNAPSHOT") ? "https://snapshots.elastic.co" : "https://artifacts.elastic.co"
      Closure sortClosure = { a, b -> b.group <=> a.group }
      Closure depJavadocClosure = { shadowed, dep ->
        if (dep.group == null || false == dep.group.startsWith('com.strapdata.elasticsearch')) {
          return
        }
        Project upstreamProject = project.ext.dependencyToProject(dep)
        if (upstreamProject == null) {
          return
        }
        if (shadowed) {
          /*
           * Include the source of shadowed upstream projects so we don't
           * have to publish their javadoc.
           */
          project.evaluationDependsOn(upstreamProject.path)
          project.javadoc.source += upstreamProject.javadoc.source
          /*
           * Instead we need the upstream project's javadoc classpath so
           * we don't barf on the classes that it references.
           */
          project.javadoc.classpath += upstreamProject.javadoc.classpath
        } else {
          // Link to non-shadowed dependant projects
          project.javadoc.dependsOn "${upstreamProject.path}:javadoc"
          String artifactPath = dep.group.replaceAll('\\.', '/') + '/' + dep.name.replaceAll('\\.', '/') + '/' + dep.version
          project.javadoc.options.linksOffline artifactsHost + "/javadoc/" + artifactPath, "${upstreamProject.buildDir}/docs/javadoc/"
        }
      }
      boolean hasShadow = project.plugins.hasPlugin(ShadowPlugin)
      project.configurations.compile.dependencies
          .findAll()
          .toSorted(sortClosure)
          .each({ c -> depJavadocClosure(false, c) })
      project.configurations.compileOnly.dependencies
          .findAll()
          .toSorted(sortClosure)
          .each({ c -> depJavadocClosure(false, c) })
      if (hasShadow) {
        project.configurations.bundle.dependencies
            .findAll()
            .toSorted(sortClosure)
            .each({ c -> depJavadocClosure(true, c) })
      }
    }
  }
}

// Ensure similar tasks in dependent projects run first. The projectsEvaluated here is
// important because, while dependencies.all will pickup future dependencies,
// it is not necessarily true that the task exists in both projects at the time
// the dependency is added.
gradle.projectsEvaluated {
  allprojects {
    if (project.path == ':test:framework') {
      // :test:framework:test cannot run before and after :server:test
      return
    }
    if (tasks.findByPath('test') != null && tasks.findByPath('integTest') != null) {
      integTest.mustRunAfter test
    }
    configurations.all { Configuration configuration ->
      dependencies.all { Dependency dep ->
        Project upstreamProject = dependencyToProject(dep)
        if (upstreamProject != null) {
          if (project.path == upstreamProject.path) {
            // TODO: distribution integ tests depend on themselves (!), fix that
            return
          }
          for (String taskName : ['test', 'integTest']) {
            Task task = project.tasks.findByName(taskName)
            Task upstreamTask = upstreamProject.tasks.findByName(taskName)
            if (task != null && upstreamTask != null) {
              task.shouldRunAfter(upstreamTask)
            }
          }
        }
      }
    }
  }
}

// intellij configuration
allprojects {
  apply plugin: 'idea'

  if (isIdea) {
    project.buildDir = file('build-idea')
  }
  idea {
    module {
      inheritOutputDirs = false
      outputDir = file('build-idea/classes/main')
      testOutputDir = file('build-idea/classes/test')

      // also ignore other possible build dirs
      excludeDirs += file('build')
      excludeDirs += file('build-eclipse')
    }
  }

  task cleanIdeaBuildDir(type: Delete) {
    delete 'build-idea'
  }
  cleanIdeaBuildDir.setGroup("ide")
  cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory.")

  tasks.cleanIdea.dependsOn(cleanIdeaBuildDir)
}

idea {
  project {
    vcs = 'Git'
  }
}

// eclipse configuration
allprojects {
  apply plugin: 'eclipse'
  // Name all the non-root projects after their path so that paths get grouped together when imported into eclipse.
  if (path != ':') {
    eclipse.project.name = path
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      eclipse.project.name = eclipse.project.name.replace(':', '_')
    }
  }

  plugins.withType(JavaBasePlugin) {
    eclipse.classpath.defaultOutputDir = file('build-eclipse')
    eclipse.classpath.file.whenMerged { classpath ->
      // give each source folder a unique corresponding output folder
      int i = 0;
      classpath.entries.findAll { it instanceof SourceFolder }.each { folder ->
        i++;
        folder.output = "build-eclipse/" + i
      }
    }
  }

  File licenseHeaderFile
  licenseHeaderFile = new File(project.rootDir, 'buildSrc/src/main/resources/license-headers/oss-license-header.txt')

  String lineSeparator = Os.isFamily(Os.FAMILY_WINDOWS) ? '\\\\r\\\\n' : '\\\\n'
  String licenseHeader = licenseHeaderFile.getText('UTF-8').replace(System.lineSeparator(), lineSeparator)
  task copyEclipseSettings(type: Copy) {
    // TODO: "package this up" for external builds
    from new File(project.rootDir, 'buildSrc/src/main/resources/eclipse.settings')
    into '.settings'
    filter{ it.replaceAll('@@LICENSE_HEADER_TEXT@@', licenseHeader)}
  }
  // otherwise .settings is not nuked entirely
  task wipeEclipseSettings(type: Delete) {
    delete '.settings'
  }
  tasks.cleanEclipse.dependsOn(wipeEclipseSettings)
  // otherwise the eclipse merging is *super confusing*
  tasks.eclipse.dependsOn(cleanEclipse, copyEclipseSettings)

  // work arround https://github.com/gradle/gradle/issues/6582 
  tasks.eclipseProject.mustRunAfter tasks.cleanEclipseProject
  tasks.matching { it.name == 'eclipseClasspath' }.all {
    it.mustRunAfter { tasks.cleanEclipseClasspath }
  }
  tasks.matching { it.name == 'eclipseJdt' }.all {
    it.mustRunAfter { tasks.cleanEclipseJdt }
  }
  tasks.copyEclipseSettings.mustRunAfter tasks.wipeEclipseSettings
}

allprojects {
  /*
   * IntelliJ and Eclipse don't know about the shadow plugin so when we're
   * in "IntelliJ mode" or "Eclipse mode" switch "bundle" dependencies into
   * regular "compile" dependencies. This isn't needed for the project
   * itself because the IDE configuration is done by SourceSets but it is
   * *is* needed for projects that depends on the project doing the shadowing.
   * Without this they won't properly depend on the shadowed project.
   */
  if (isEclipse || isIdea) {
    project.plugins.withType(ShadowPlugin).whenPluginAdded {
      project.afterEvaluate {
        project.configurations.compile.extendsFrom project.configurations.bundle
      }
    }
  }
}

// we need to add the same --debug-jvm option as
// the real RunTask has, so we can pass it through
class Run extends DefaultTask {
  boolean debug = false

  @Option(
        option = "debug-jvm",
        description = "Enable debugging configuration, to allow attaching a debugger to elasticsearch."
  )
  public void setDebug(boolean enabled) {
    project.project(':distribution').run.clusterConfig.debug = enabled
  }
}
task run(type: Run) {
  dependsOn ':distribution:run'
  description = 'Runs elasticsearch in the foreground'
  group = 'Verification'
  impliesSubProjects = true
}

wrapper {
    distributionType = 'ALL'
    doLast {
        final DistributionLocator locator = new DistributionLocator()
        final GradleVersion version = GradleVersion.version(wrapper.gradleVersion)
        final URI distributionUri = locator.getDistributionFor(version, wrapper.distributionType.name().toLowerCase(Locale.ENGLISH))
        final URI sha256Uri = new URI(distributionUri.toString() + ".sha256")
        final String sha256Sum = new String(sha256Uri.toURL().bytes)
        wrapper.getPropertiesFile() << "distributionSha256Sum=${sha256Sum}\n"
        println "Added checksum to wrapper properties"
        // Update build-tools to reflect the Gradle upgrade
        // TODO: we can remove this once we have tests to make sure older versions work.
        project(':build-tools').file('src/main/resources/minimumGradleVersion').text = gradleVersion
        println "Updated minimum Gradle Version"
    }
}

gradle.projectsEvaluated {
  subprojects {
    /*
     * Remove assemble/dependenciesInfo on all qa projects because we don't
     * need to publish artifacts for them.
     */
    if (project.name.equals('qa') || project.path.contains(':qa:')) {
      Task assemble = project.tasks.findByName('assemble')
      if (assemble) {
        assemble.enabled = false
      }
      Task dependenciesInfo = project.tasks.findByName('dependenciesInfo')
      if (dependenciesInfo) {
        dependenciesInfo.enabled = false
      }
    }
  }
}

if (System.properties.get("build.compare") != null) {
  apply plugin: 'compare-gradle-builds'
  compareGradleBuilds {
    ext.referenceProject = System.properties.get("build.compare")
    doFirst {
      if (file(referenceProject).exists() == false) {
        throw new GradleException(
                "Use git worktree to check out a version to compare against to ../elasticsearch_build_reference"
        )
      }
    }
    sourceBuild {
      gradleVersion = gradle.getGradleVersion()
      projectDir = referenceProject
      tasks = ["clean", "assemble"]
      arguments = ["-Dbuild.compare_friendly=true"]
    }
    targetBuild {
      tasks = ["clean", "assemble"]
      // use -Dorg.gradle.java.home= to alter jdk versions
      arguments = ["-Dbuild.compare_friendly=true"]
    }
  }
}

allprojects {
  task resolveAllDependencies {
      dependsOn tasks.matching { it.name == "pullFixture"}
      doLast {
        configurations.findAll { it.isCanBeResolved() }.each { it.resolve() }
      }
  }
}

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.fork = true
    }

  task checkPart1
  task checkPart2 
  tasks.matching { it.name == "check" }.all { check ->
    if (check.path.startsWith(":x-pack:")) {
      checkPart2.dependsOn check
    } else {
      checkPart1.dependsOn check
    }
  } 
}

gradle.projectsEvaluated {
  // import ant tasks from cassandra
  ant.importBuild('server/cassandra/build.xml') { antTargetName ->
    'cassandra-' + antTargetName
  }

  ant.setProperty("javac.executable", project.cassandraJavaHome + "/bin/javac")
}

tasks.getByName('clean').dependsOn('cassandra-realclean')


